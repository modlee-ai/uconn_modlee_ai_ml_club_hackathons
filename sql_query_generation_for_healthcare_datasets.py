# -*- coding: utf-8 -*-
"""SQL query generation for healthcare datasets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QaRuSmZrYAGVjqmvtNlWq5MdkQl74eIl

###MOCK DATABASE CREATION CODE

### Mock Healthcare Database and Schema Creation

This cell creates a mock healthcare database and schema for testing and demonstration purposes.

**Database:**

The database is an SQLite database named `mock_healthcare.db`. It stores simulated healthcare claims data, including patient and provider information, diagnosis and procedure codes, service dates, claim amounts, insurance details, and more.

**Schema:**

The schema is defined in a JSON file named `schema_healthcare.json`. This file provides a structured representation of the database, outlining the tables, columns, data types, and relationships within the database. It serves as a blueprint for understanding and interacting with the data.

**Data Generation:**

The code generates random claim records with realistic values for various fields, such as diagnosis codes, procedure codes, insurance plans, and claim amounts. This mock data allows for testing and exploration of the database and schema.

**Purpose:**

This mock database and schema are essential for developing and validating AI-
"""

import os
import json
import random
import sqlite3
import requests
import time
# Paths for the mock healthcare claims DB and schema
BASE_DIR    = os.getcwd()
DB_PATH     = os.path.join(BASE_DIR, "mock_healthcare.db")
SCHEMA_PATH = os.path.join(BASE_DIR, "schema_healthcare.json")
API_URL = "https://agentsserver.modlee.ai:5000/data_operator_agent_sql"  # Adjust if using a different host/port
API_KEY = "3aae7bb39888eebf96e0b553a1bd3240"  # Use a default key for local testing if not set

def create_mock_database():
    """Creates a mock healthcare claims SQLite database."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    # Create claims_data table
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS claims_data (
            claim_id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id TEXT,
            provider_id TEXT,
            diagnosis_code TEXT,
            procedure_code TEXT,
            service_date TEXT,
            claim_date TEXT,
            claim_amount FLOAT,
            paid_amount FLOAT,
            insurance_plan TEXT,
            claim_status TEXT,
            region TEXT
        )
    """)

    # Sample values
    diagnosis_codes = ["E11.9", "I10", "J06.9", "M54.5", "N39.0"]
    procedure_codes = ["99213", "80050", "93000", "90471", "71020"]
    insurance_plans = ["HMO", "PPO", "EPO", "POS"]
    claim_statuses  = ["Pending", "Paid", "Denied", "In Review"]
    regions         = ["North", "South", "East", "West"]

    # Insert 200 random claim records
    for _ in range(200):
        service_date = f"2025-{random.randint(1,12):02d}-{random.randint(1,28):02d}"
        claim_date   = f"2025-{random.randint(1,12):02d}-{random.randint(1,28):02d}"
        claim_amount = round(random.uniform(100, 10000), 2)
        paid_amount  = round(claim_amount * random.uniform(0.6, 1.0), 2)

        cursor.execute("""
            INSERT INTO claims_data (
                patient_id, provider_id, diagnosis_code, procedure_code,
                service_date, claim_date, claim_amount, paid_amount,
                insurance_plan, claim_status, region
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            f"P{random.randint(1000,9999)}",
            f"PR{random.randint(100,999)}",
            random.choice(diagnosis_codes),
            random.choice(procedure_codes),
            service_date,
            claim_date,
            claim_amount,
            paid_amount,
            random.choice(insurance_plans),
            random.choice(claim_statuses),
            random.choice(regions)
        ))

    conn.commit()
    conn.close()
    print(f"‚úÖ Created mock healthcare claims database at {DB_PATH}")

def create_mock_schema():
    """Writes a JSON schema for the claims_data table."""
    schema = {
        "database": {
            "name": os.path.basename(DB_PATH),
            "human_context": {
                "description": "Mock healthcare claims database for testing AI-driven NL‚ÜíSQL workflows."
            }
        },
        "tables": {
            "claims_data": {
                "human_context": {
                    "description": "Each row represents a healthcare claim with patient, provider, codes, and financials."
                },
                "columns": {
                    "claim_id":        {"data_type": "INTEGER", "is_primary_key": True},
                    "patient_id":      {"data_type": "TEXT"},
                    "provider_id":     {"data_type": "TEXT"},
                    "diagnosis_code":  {"data_type": "TEXT"},
                    "procedure_code":  {"data_type": "TEXT"},
                    "service_date":    {"data_type": "TEXT"},
                    "claim_date":      {"data_type": "TEXT"},
                    "claim_amount":    {"data_type": "FLOAT"},
                    "paid_amount":     {"data_type": "FLOAT"},
                    "insurance_plan":  {"data_type": "TEXT"},
                    "claim_status":    {"data_type": "TEXT"},
                    "region":          {"data_type": "TEXT"}
                },
                "aggregations": {
                    "allowed_functions": ["SUM", "AVG", "COUNT", "MIN", "MAX"],
                    "applicable_data_types": {
                        "SUM": ["FLOAT", "INTEGER"],
                        "AVG": ["FLOAT", "INTEGER"],
                        "COUNT": ["ANY"],
                        "MIN": ["FLOAT", "INTEGER", "TEXT"],
                        "MAX": ["FLOAT", "INTEGER", "TEXT"]
                    }
                },
                "filters": {
                    "allowed_filter_types": ["exact", "range"],
                    "applicable_data_types": {
                        "exact": ["TEXT", "INTEGER", "FLOAT"],
                        "range": ["INTEGER", "FLOAT", "TEXT"]
                    }
                },
                "group_by_options": {
                    "human_context": {
                        "description": "Logical groupings for claim analytics.",
                        "qa_section": {
                            "Which columns are good for grouping claims?":
                                "Grouping by `diagnosis_code`, `procedure_code`, and `insurance_plan` yields actionable insights."
                        }
                    },
                    "programmatically_obtained": {
                        "allowed": True,
                        "recommended_columns": ["diagnosis_code", "insurance_plan"]
                    }
                },
                "order_by_options": {
                    "human_context": {
                        "description": "Columns commonly used to sort claim results.",
                        "qa_section": {
                            "Which fields are typical sort keys?":
                                "`claim_date`, `claim_amount`, and `paid_amount` are frequently sorted."
                        }
                    },
                    "programmatically_obtained": {
                        "allowed": True,
                        "applicable_data_types": ["INTEGER", "FLOAT", "TEXT"]
                    }
                },
                "pagination": {
                    "human_context": {
                        "description": "Defines how many claim records to return per page."
                    },
                    "programmatically_obtained": {
                        "default_limit": 20,
                        "max_limit": 1000,
                        "supports_offset": True
                    }
                }
            }
        }
    }

    with open(SCHEMA_PATH, "w") as f:
        json.dump(schema, f, indent=4)
    print(f"‚úÖ Created mock schema JSON at {SCHEMA_PATH}")

if __name__ == "__main__":
    create_mock_database()
    create_mock_schema()

"""###MOCK DATABASE UPLOADED"""

# ‚úÖ Step 3: CLI for SQL API interaction
def test_sql_api():
    print("\nüîç SQL API CLI - Ask questions about the database!")

    with open(SCHEMA_PATH, "r") as f:
        schema = json.load(f)

    headers = {"X-API-KEY": API_KEY}

    while True:

        print("\n\nüìå Example questions ----")
        print("  1Ô∏è‚É£ What is the total sales amount for each product?")
        print("  2Ô∏è‚É£ Which region has the highest total sales revenue?")
        print("  3Ô∏è‚É£ What are the top 5 highest-value transactions, and which customers made them?")
        print("  4Ô∏è‚É£ How many purchases were made using each payment method?")
        print("  5Ô∏è‚É£ What is the average feedback score for each product category?")
        print("üî¥ Type 'exit' to stop.\n\n")

        user_question = input("üìù Enter your question: ")
        if user_question.lower() == "exit":
            print("üëã Exiting...")
            break

        payload = {"user_question": user_question, "schema": schema}

        print("‚è≥ Sending request to API...")
        response = requests.post(API_URL, json=payload, headers=headers)

        if response.status_code == 200:
            data = response.json()
            print("\n‚úÖ API Response Received!")
            print("Generated SQL Query:\n", data["query"])
            print("Query Parameters:\n", data["params"])

            # ‚úÖ Execute query on the SQLite database
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()

            try:
                cursor.execute(data["query"], data["params"])
                results = cursor.fetchall()

                print("\nüìä Query Results:\n")
                for row in results:
                    print(row)

            except Exception as e:
                print(f"‚ùå Error executing query: {e}")

            finally:
                cursor.close()
                conn.close()

        else:
            print(f"‚ùå API Request Failed: {response.status_code}")
            print("Response:", response.text)


if __name__ == "__main__":
    create_mock_database()
    create_mock_schema()
    test_sql_api()

